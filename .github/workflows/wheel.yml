name: Build Wheels and Test
on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.os }} - ${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, ubuntu-22.04, macos-13 ]
        arch: [ x86_64 ]
        include:
          - os: ubuntu-24.04-arm
            arch: aarch64
          - os: ubuntu-22.04-arm
            arch: aarch64
          - os: macos-latest
            arch: arm64
          - os: windows-2025
            arch: AMD64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Dependencies macOS
        if: runner.os == 'macOS'
        run: pip3 install --break-system-packages wheel

      - name: Install Dependencies macOS
        if: runner.os != 'macOS'
        run: pip3 install -U wheel

      - name: Build Wheels
        uses: pypa/cibuildwheel@v2.22.0
        env:
          CIBW_ARCHS: 'auto64'
          CIBW_BUILD: >
            cp3{9,10,11,12,13}-macosx_${{ matrix.arch }}
            cp3{9,10,11,12,13}-manylinux_${{ matrix.arch }}
            cp3{9,10,11,12,13}-win_amd64
          MACOSX_DEPLOYMENT_TARGET: "11"
          CIBW_BUILD_VERBOSITY: 1


      - name: List Build Results
        run: ls wheelhouse

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          # Use a unique artifact name per job to avoid conflicts.
          name: wheels-${{ matrix.os }}-${{ matrix.arch }}
          path: ./wheelhouse/*.whl
          if-no-files-found: warn
          compression-level: 6
          overwrite: false
          include-hidden-files: false
  run:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    needs: [build]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, ubuntu-22.04, macos-13 ]
        arch: [ x86_64 ]
        include:
          - os: ubuntu-24.04-arm
            arch: aarch64
          - os: ubuntu-22.04-arm
            arch: aarch64
          - os: macos-latest
            arch: arm64
          - os: windows-2025
            arch: AMD64
        python-version: ['3.13']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          # Download the artifact with the matching OS and architecture.
          name: wheels-${{ matrix.os }}-${{ matrix.arch }}
          path: built_wheels

      - name: Display structure of downloaded files
        run: ls -R built_wheels

      - name: Install Dependencies
        run: python -m pip install trimesh numpy

      - name: Install Packages
        run: |
          python -m pip install $(find built_wheels -name 'coacd-*.whl')
        shell: bash

      - name: Run Tests
        run: python run_tests.py -v
        
  release_artifacts:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    name: Release repaired and tested wheels
    needs: [build, run]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Optional, use if you use setuptools_scm
        submodules: true  # Optional, use if you have submodules

    - name: Download compressed artifacts
      id: download
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        merge-multiple: true

    - name: Display structure of downloaded files
      run: ls -R ./artifacts

    - name: Create release and upload wheels
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifacts: "${{ steps.download.outputs.download-path }}/*.whl,${{ steps.download.outputs.download-path }}/*.gz,${{ steps.download.outputs.download-path }}/*.so,${{ steps.download.outputs.download-path }}/*.dylib,${{ steps.download.outputs.download-path }}/*.lib,${{ steps.download.outputs.download-path }}/*.dll"
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: PyPI Publish
      uses: pypa/gh-action-pypi-publish@v1.12.4
      with:
        packages-dir: ${{ steps.download.outputs.download-path }}
